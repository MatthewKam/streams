{"ast":null,"code":"var _jsxFileName = \"/Users/mattkam/Desktop/learnStuff/Udemy/master-react/streams/client/src/components/streams/StreamCreate.js\";\nimport React, { Component } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass StreamCreate extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      // console.log(meta);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 4\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 5\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 5\n        }\n      })), this.renderError(meta));\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 11\n        }\n      }, error));\n    }\n  }\n\n  onSubmit(formValues) {\n    // //redux form handles for us\n    // event.preventDefault();\n    console.log(formValues);\n  }\n\n  render() {\n    // console.log(this.props);\n    return /*#__PURE__*/React.createElement(\"form\", {\n      action: \"\",\n      className: \"ui form\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamCreate\",\n  validate // validate: validate\n\n})(StreamCreate);","map":{"version":3,"sources":["/Users/mattkam/Desktop/learnStuff/Udemy/master-react/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Component","Field","reduxForm","StreamCreate","renderInput","input","label","meta","renderError","error","touched","onSubmit","formValues","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAWpCI,WAXoC,GAWtB,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACvC;AACF,0BACC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAO,QAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBD,KAAnB,CADD,eAEC,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFD,EAGM,KAAKG,WAAL,CAAiBD,IAAjB,CAHN,CADD;AAOA,KApBmC;AAAA;;AACnCC,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAmB;AAC5B,QAAGA,OAAO,IAAID,KAAd,EAAoB;AAClB,0BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADF,CADF;AAKD;AACF;;AAYFE,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACpB;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA;;AAEDG,EAAAA,MAAM,GAAG;AACR;AACA,wBACC;AACC,MAAA,MAAM,EAAC,EADR;AAEC,MAAA,SAAS,EAAC,SAFX;AAGC,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKC,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKP,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALD,eAMC,oBAAC,KAAD;AACC,MAAA,IAAI,EAAC,aADN;AAEC,MAAA,SAAS,EAAE,KAAKA,WAFjB;AAGC,MAAA,KAAK,EAAC,mBAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,eAWC;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXD,CADD;AAeA;;AA5CmC;;AA+CrC,MAAMc,QAAQ,GAAIN,UAAD,IAAgB;AAChC,QAAMO,MAAM,GAAG,EAAf;;AACA,MAAI,CAACP,UAAU,CAACQ,KAAhB,EAAuB;AACtBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACA;;AACD,MAAI,CAACR,UAAU,CAACS,WAAhB,EAA6B;AAC5BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACA;;AACD,SAAOF,MAAP;AACA,CATD;;AAWA,eAAejB,SAAS,CAAC;AACxBoB,EAAAA,IAAI,EAAE,cADkB;AAExBJ,EAAAA,QAFwB,CAGxB;;AAHwB,CAAD,CAAT,CAIZf,YAJY,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass StreamCreate extends Component {\n  renderError({error, touched}) {\n    if(touched && error){\n      return(\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      )\n    }\n  }\n\n\trenderInput = ({ input, label, meta }) => {\n    // console.log(meta);\n\t\treturn (\n\t\t\t<div className=\"field\">\n\t\t\t\t<label htmlFor=\"\">{label}</label>\n\t\t\t\t<input {...input} autoComplete=\"off\" />\n        {this.renderError(meta)}\n\t\t\t</div>\n\t\t);\n\t}\n\tonSubmit(formValues) {\n\t\t// //redux form handles for us\n\t\t// event.preventDefault();\n\t\tconsole.log(formValues);\n\t}\n\n\trender() {\n\t\t// console.log(this.props);\n\t\treturn (\n\t\t\t<form\n\t\t\t\taction=\"\"\n\t\t\t\tclassName=\"ui form\"\n\t\t\t\tonSubmit={this.props.handleSubmit(this.onSubmit)}\n\t\t\t>\n\t\t\t\t<Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n\t\t\t\t<Field\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tcomponent={this.renderInput}\n\t\t\t\t\tlabel=\"Enter Description\"\n\t\t\t\t/>\n\t\t\t\t<button className=\"ui button primary\">Submit</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nconst validate = (formValues) => {\n\tconst errors = {};\n\tif (!formValues.title) {\n\t\terrors.title = \"You must enter a title\";\n\t}\n\tif (!formValues.description) {\n\t\terrors.description = \"You must enter a description\";\n\t}\n\treturn errors;\n};\n\nexport default reduxForm({\n\tform: \"streamCreate\",\n\tvalidate,\n\t// validate: validate\n})(StreamCreate);\n"]},"metadata":{},"sourceType":"module"}