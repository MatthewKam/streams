{"ast":null,"code":"var _jsxFileName = \"/Users/mattkam/Desktop/learnStuff/Udemy/master-react/streams/client/src/components/streams/StreamCreate.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      // console.log(meta);\n      const className = `field${meta.error && meta.touched ? \" error\" : \"\"}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 4\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 5\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 5\n        }\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      // //redux form handles for us\n      // event.preventDefault();\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 6\n        }\n      }, error));\n    }\n  }\n\n  render() {\n    // console.log(this.props);\n    return /*#__PURE__*/React.createElement(\"form\", {\n      action: \"\",\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate // validate: validate\n\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/mattkam/Desktop/learnStuff/Udemy/master-react/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Component","connect","createStream","StreamCreate","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","formWrapped","reduxForm","form"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAWpCI,WAXoC,GAWtB,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACzC;AACA,YAAMC,SAAS,GAAI,QAAOD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,QAA7B,GAAwC,EAAG,EAArE;AACA,0BACC;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAO,QAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBF,KAAnB,CADD,eAEC,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFD,EAGE,KAAKM,WAAL,CAAiBJ,IAAjB,CAHF,CADD;AAOA,KArBmC;;AAAA,SAsBpCK,QAtBoC,GAsBxBC,UAAD,IAAgB;AAC1B;AACA;AACE,WAAKC,KAAL,CAAWZ,YAAX,CAAwBW,UAAxB;AACF,KA1BmC;AAAA;;AACpCF,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC/B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACrB,0BACC;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADD,CADD;AAKA;AACD;;AAmBDM,EAAAA,MAAM,GAAG;AACR;AACA,wBACC;AACC,MAAA,MAAM,EAAC,EADR;AAEC,MAAA,SAAS,EAAC,eAFX;AAGC,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKC,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALD,eAMC,oBAAC,KAAD;AACC,MAAA,IAAI,EAAC,aADN;AAEC,MAAA,SAAS,EAAE,KAAKA,WAFjB;AAGC,MAAA,KAAK,EAAC,mBAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,eAWC;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXD,CADD;AAeA;;AA7CmC;;AAgDrC,MAAMa,QAAQ,GAAIJ,UAAD,IAAgB;AAChC,QAAMK,MAAM,GAAG,EAAf;;AACA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACtBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACA;;AACD,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AAC5BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACA;;AACD,SAAOF,MAAP;AACA,CATD;;AAWA,MAAMG,WAAW,GAAGC,SAAS,CAAC;AAC7BC,EAAAA,IAAI,EAAE,cADuB;AAE7BN,EAAAA,QAF6B,CAG7B;;AAH6B,CAAD,CAAT,CAIjBd,YAJiB,CAApB;AAMA,eAAeF,OAAO,CAAC,IAAD,EAAO;AAACC,EAAAA;AAAD,CAAP,CAAP,CAA8BmB,WAA9B,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStream } from '../../actions'\n \nclass StreamCreate extends Component {\n\trenderError({ error, touched }) {\n\t\tif (touched && error) {\n\t\t\treturn (\n\t\t\t\t<div className=\"ui error message\">\n\t\t\t\t\t<div className=\"header\">{error}</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\trenderInput = ({ input, label, meta }) => {\n\t\t// console.log(meta);\n\t\tconst className = `field${meta.error && meta.touched ? \" error\" : \"\"}`;\n\t\treturn (\n\t\t\t<div className={className}>\n\t\t\t\t<label htmlFor=\"\">{label}</label>\n\t\t\t\t<input {...input} autoComplete=\"off\" />\n\t\t\t\t{this.renderError(meta)}\n\t\t\t</div>\n\t\t);\n\t};\n\tonSubmit = (formValues) => {\n\t\t// //redux form handles for us\n\t\t// event.preventDefault();\n    this.props.createStream(formValues)\n\t}\n\n\trender() {\n\t\t// console.log(this.props);\n\t\treturn (\n\t\t\t<form\n\t\t\t\taction=\"\"\n\t\t\t\tclassName=\"ui form error\"\n\t\t\t\tonSubmit={this.props.handleSubmit(this.onSubmit)}\n\t\t\t>\n\t\t\t\t<Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n\t\t\t\t<Field\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tcomponent={this.renderInput}\n\t\t\t\t\tlabel=\"Enter Description\"\n\t\t\t\t/>\n\t\t\t\t<button className=\"ui button primary\">Submit</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nconst validate = (formValues) => {\n\tconst errors = {};\n\tif (!formValues.title) {\n\t\terrors.title = \"You must enter a title\";\n\t}\n\tif (!formValues.description) {\n\t\terrors.description = \"You must enter a description\";\n\t}\n\treturn errors;\n};\n\nconst formWrapped = reduxForm({\n\tform: \"streamCreate\",\n\tvalidate,\n\t// validate: validate\n})(StreamCreate);\n\nexport default connect(null, {createStream})(formWrapped);"]},"metadata":{},"sourceType":"module"}