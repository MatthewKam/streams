{"ast":null,"code":"import streams from \"../apis/streams\";\nimport history from '../history';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, EDIT_STREAM, DELETE_STREAM } from \"./types\";\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n}; // uses redux thunk because it returns an async function\n\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streams.post(\"/streams\", { ...formValues,\n    userId\n  });\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  });\n  history.push('/');\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\");\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};","map":{"version":3,"sources":["/Users/mattkam/Desktop/learnStuff/Udemy/master-react/streams/client/src/actions/index.js"],"names":["streams","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","EDIT_STREAM","DELETE_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SACCC,OADD,EAECC,QAFD,EAGCC,aAHD,EAICC,aAJD,EAKCC,YALD,EAMCC,WAND,EAOCC,aAPD,QAQO,SARP;AAUA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AACjC,SAAO;AACNC,IAAAA,IAAI,EAAET,OADA;AAENU,IAAAA,OAAO,EAAEF;AAFH,GAAP;AAIA,CALM;AAMP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC5B,SAAO;AACNF,IAAAA,IAAI,EAAER;AADA,GAAP;AAGA,CAJM,C,CAMP;;AACA,OAAO,MAAMW,YAAY,GAAIC,UAAD,IAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACzE,QAAM;AAAEP,IAAAA;AAAF,MAAaO,QAAQ,GAAGC,IAA9B;AACA,QAAMC,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,IAAR,CAAa,UAAb,EAAyB,EAAE,GAAGL,UAAL;AAAiBL,IAAAA;AAAjB,GAAzB,CAAvB;AACCM,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACApB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACD,CALM;AAOP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOP,QAAP,IAAoB;AACrD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAY,UAAZ,CAAvB;AACAR,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACA,CAHM;AAKP,OAAO,MAAMI,WAAW,GAAIC,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACtD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AACAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,YAAR;AAAsBM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACA,CAHM;AAKP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKX,UAAL,KAAoB,MAAOC,QAAP,IAAoB;AACjE,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAAC4B,GAAR,CAAa,YAAWF,EAAG,EAA3B,EAA8BX,UAA9B,CAAvB;AACAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,WAAR;AAAqBK,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACA,CAHM;AAKP,OAAO,MAAMQ,YAAY,GAAIH,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACvD,QAAMhB,OAAO,CAAC8B,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN;AACAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEH,aAAR;AAAuBI,IAAAA,OAAO,EAAEc;AAAhC,GAAD,CAAR;AACA,CAHM","sourcesContent":["import streams from \"../apis/streams\";\nimport history from '../history';\nimport {\n\tSIGN_IN,\n\tSIGN_OUT,\n\tCREATE_STREAM,\n\tFETCH_STREAMS,\n\tFETCH_STREAM,\n\tEDIT_STREAM,\n\tDELETE_STREAM,\n} from \"./types\";\n\nexport const signIn = (userId) => {\n\treturn {\n\t\ttype: SIGN_IN,\n\t\tpayload: userId,\n\t};\n};\nexport const signOut = () => {\n\treturn {\n\t\ttype: SIGN_OUT,\n\t};\n};\n\n// uses redux thunk because it returns an async function\nexport const createStream = (formValues) => async (dispatch, getState) => {\n\tconst { userId } = getState().auth;\n\tconst response = await streams.post(\"/streams\", { ...formValues, userId });\n  dispatch({ type: CREATE_STREAM, payload: response.data });\n  history.push('/');\n};\n\nexport const fetchStreams = () => async (dispatch) => {\n\tconst response = await streams.get(\"/streams\");\n\tdispatch({ type: FETCH_STREAMS, payload: response.data });\n};\n\nexport const fetchStream = (id) => async (dispatch) => {\n\tconst response = await streams.get(`/streams/${id}`);\n\tdispatch({ type: FETCH_STREAM, payload: response.data });\n};\n\nexport const editStream = (id, formValues) => async (dispatch) => {\n\tconst response = await streams.put(`/streams/${id}`, formValues);\n\tdispatch({ type: EDIT_STREAM, payload: response.data });\n};\n\nexport const deleteStream = (id) => async (dispatch) => {\n\tawait streams.delete(`/streams/${id}`);\n\tdispatch({ type: DELETE_STREAM, payload: id });\n};"]},"metadata":{},"sourceType":"module"}